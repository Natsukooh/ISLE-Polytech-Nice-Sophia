   1               		.file	"list.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  23               	.global	vListInitialise
  25               	vListInitialise:
   1:FreeRTOS/Source/list.c **** /*
   2:FreeRTOS/Source/list.c ****  * FreeRTOS Kernel V10.3.1
   3:FreeRTOS/Source/list.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:FreeRTOS/Source/list.c ****  *
   5:FreeRTOS/Source/list.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:FreeRTOS/Source/list.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:FreeRTOS/Source/list.c ****  * the Software without restriction, including without limitation the rights to
   8:FreeRTOS/Source/list.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:FreeRTOS/Source/list.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:FreeRTOS/Source/list.c ****  * subject to the following conditions:
  11:FreeRTOS/Source/list.c ****  *
  12:FreeRTOS/Source/list.c ****  * The above copyright notice and this permission notice shall be included in all
  13:FreeRTOS/Source/list.c ****  * copies or substantial portions of the Software.
  14:FreeRTOS/Source/list.c ****  *
  15:FreeRTOS/Source/list.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:FreeRTOS/Source/list.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:FreeRTOS/Source/list.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:FreeRTOS/Source/list.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:FreeRTOS/Source/list.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:FreeRTOS/Source/list.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:FreeRTOS/Source/list.c ****  *
  22:FreeRTOS/Source/list.c ****  * http://www.FreeRTOS.org
  23:FreeRTOS/Source/list.c ****  * http://aws.amazon.com/freertos
  24:FreeRTOS/Source/list.c ****  *
  25:FreeRTOS/Source/list.c ****  * 1 tab == 4 spaces!
  26:FreeRTOS/Source/list.c ****  */
  27:FreeRTOS/Source/list.c **** 
  28:FreeRTOS/Source/list.c **** 
  29:FreeRTOS/Source/list.c **** #include <stdlib.h>
  30:FreeRTOS/Source/list.c **** #include "FreeRTOS.h"
  31:FreeRTOS/Source/list.c **** #include "list.h"
  32:FreeRTOS/Source/list.c **** 
  33:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------
  34:FreeRTOS/Source/list.c ****  * PUBLIC LIST API documented in list.h
  35:FreeRTOS/Source/list.c ****  *----------------------------------------------------------*/
  36:FreeRTOS/Source/list.c **** 
  37:FreeRTOS/Source/list.c **** void vListInitialise( List_t * const pxList )
  38:FreeRTOS/Source/list.c **** {
  27               	.LM0:
  28               	.LFBB1:
  29               	/* prologue: function */
  30               	/* frame size = 0 */
  31               	/* stack size = 0 */
  32               	.L__stack_usage = 0
  33 0000 FC01      		movw r30,r24
  39:FreeRTOS/Source/list.c **** 	/* The list structure contains a list item which is used to mark the
  40:FreeRTOS/Source/list.c **** 	end of the list.  To initialise the list the list end is inserted
  41:FreeRTOS/Source/list.c **** 	as the only list entry. */
  42:FreeRTOS/Source/list.c **** 	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini lis
  35               	.LM1:
  36 0002 0396      		adiw r24,3
  38               	.LM2:
  39 0004 9283      		std Z+2,r25
  40 0006 8183      		std Z+1,r24
  43:FreeRTOS/Source/list.c **** 
  44:FreeRTOS/Source/list.c **** 	/* The list end value is the highest possible value in the list to
  45:FreeRTOS/Source/list.c **** 	ensure it remains at the end of the list. */
  46:FreeRTOS/Source/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
  42               	.LM3:
  43 0008 2FEF      		ldi r18,lo8(-1)
  44 000a 3FEF      		ldi r19,lo8(-1)
  45 000c 3483      		std Z+4,r19
  46 000e 2383      		std Z+3,r18
  47:FreeRTOS/Source/list.c **** 
  48:FreeRTOS/Source/list.c **** 	/* The list end next and previous pointers point to itself so we know
  49:FreeRTOS/Source/list.c **** 	when the list is empty. */
  50:FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mi
  48               	.LM4:
  49 0010 9683      		std Z+6,r25
  50 0012 8583      		std Z+5,r24
  51:FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The
  52               	.LM5:
  53 0014 9087      		std Z+8,r25
  54 0016 8783      		std Z+7,r24
  52:FreeRTOS/Source/list.c **** 
  53:FreeRTOS/Source/list.c **** 	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  56               	.LM6:
  57 0018 1082      		st Z,__zero_reg__
  58               	/* epilogue start */
  54:FreeRTOS/Source/list.c **** 
  55:FreeRTOS/Source/list.c **** 	/* Write known values into the list if
  56:FreeRTOS/Source/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  57:FreeRTOS/Source/list.c **** 	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
  58:FreeRTOS/Source/list.c **** 	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
  59:FreeRTOS/Source/list.c **** }
  60               	.LM7:
  61 001a 0895      		ret
  63               	.Lscope1:
  67               	.global	vListInitialiseItem
  69               	vListInitialiseItem:
  60:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
  61:FreeRTOS/Source/list.c **** 
  62:FreeRTOS/Source/list.c **** void vListInitialiseItem( ListItem_t * const pxItem )
  63:FreeRTOS/Source/list.c **** {
  71               	.LM8:
  72               	.LFBB2:
  73               	/* prologue: function */
  74               	/* frame size = 0 */
  75               	/* stack size = 0 */
  76               	.L__stack_usage = 0
  64:FreeRTOS/Source/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
  65:FreeRTOS/Source/list.c **** 	pxItem->pxContainer = NULL;
  78               	.LM9:
  79 001c FC01      		movw r30,r24
  80 001e 1186      		std Z+9,__zero_reg__
  81 0020 1086      		std Z+8,__zero_reg__
  82               	/* epilogue start */
  66:FreeRTOS/Source/list.c **** 
  67:FreeRTOS/Source/list.c **** 	/* Write known values into the list item if
  68:FreeRTOS/Source/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  69:FreeRTOS/Source/list.c **** 	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  70:FreeRTOS/Source/list.c **** 	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  71:FreeRTOS/Source/list.c **** }
  84               	.LM10:
  85 0022 0895      		ret
  87               	.Lscope2:
  92               	.global	vListInsertEnd
  94               	vListInsertEnd:
  72:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
  73:FreeRTOS/Source/list.c **** 
  74:FreeRTOS/Source/list.c **** void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
  75:FreeRTOS/Source/list.c **** {
  96               	.LM11:
  97               	.LFBB3:
  98 0024 CF93      		push r28
  99 0026 DF93      		push r29
 100               	/* prologue: function */
 101               	/* frame size = 0 */
 102               	/* stack size = 2 */
 103               	.L__stack_usage = 2
 104 0028 9C01      		movw r18,r24
 105 002a DB01      		movw r26,r22
  76:FreeRTOS/Source/list.c **** ListItem_t * const pxIndex = pxList->pxIndex;
 107               	.LM12:
 108 002c FC01      		movw r30,r24
 109 002e C181      		ldd r28,Z+1
 110 0030 D281      		ldd r29,Z+2
  77:FreeRTOS/Source/list.c **** 
  78:FreeRTOS/Source/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
  79:FreeRTOS/Source/list.c **** 	the list data structures being overwritten in memory.  They will not catch
  80:FreeRTOS/Source/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
  81:FreeRTOS/Source/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
  82:FreeRTOS/Source/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
  83:FreeRTOS/Source/list.c **** 
  84:FreeRTOS/Source/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
  85:FreeRTOS/Source/list.c **** 	makes the new list item the last item to be removed by a call to
  86:FreeRTOS/Source/list.c **** 	listGET_OWNER_OF_NEXT_ENTRY(). */
  87:FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIndex;
 112               	.LM13:
 113 0032 1396      		adiw r26,2+1
 114 0034 DC93      		st X,r29
 115 0036 CE93      		st -X,r28
 116 0038 1297      		sbiw r26,2
  88:FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 118               	.LM14:
 119 003a 8C81      		ldd r24,Y+4
 120 003c 9D81      		ldd r25,Y+5
 122               	.LM15:
 123 003e 1596      		adiw r26,4+1
 124 0040 9C93      		st X,r25
 125 0042 8E93      		st -X,r24
 126 0044 1497      		sbiw r26,4
  89:FreeRTOS/Source/list.c **** 
  90:FreeRTOS/Source/list.c **** 	/* Only used during decision coverage testing. */
  91:FreeRTOS/Source/list.c **** 	mtCOVERAGE_TEST_DELAY();
  92:FreeRTOS/Source/list.c **** 
  93:FreeRTOS/Source/list.c **** 	pxIndex->pxPrevious->pxNext = pxNewListItem;
 128               	.LM16:
 129 0046 8C81      		ldd r24,Y+4
 130 0048 9D81      		ldd r25,Y+5
 131 004a FC01      		movw r30,r24
 132 004c 7383      		std Z+3,r23
 133 004e 6283      		std Z+2,r22
  94:FreeRTOS/Source/list.c **** 	pxIndex->pxPrevious = pxNewListItem;
 135               	.LM17:
 136 0050 7D83      		std Y+5,r23
 137 0052 6C83      		std Y+4,r22
  95:FreeRTOS/Source/list.c **** 
  96:FreeRTOS/Source/list.c **** 	/* Remember which list the item is in. */
  97:FreeRTOS/Source/list.c **** 	pxNewListItem->pxContainer = pxList;
 139               	.LM18:
 140 0054 1996      		adiw r26,8+1
 141 0056 3C93      		st X,r19
 142 0058 2E93      		st -X,r18
 143 005a 1897      		sbiw r26,8
  98:FreeRTOS/Source/list.c **** 
  99:FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 145               	.LM19:
 146 005c F901      		movw r30,r18
 147 005e 8081      		ld r24,Z
 149               	.LM20:
 150 0060 8F5F      		subi r24,lo8(-(1))
 151 0062 8083      		st Z,r24
 152               	/* epilogue start */
 100:FreeRTOS/Source/list.c **** }
 154               	.LM21:
 155 0064 DF91      		pop r29
 156 0066 CF91      		pop r28
 157 0068 0895      		ret
 163               	.Lscope3:
 168               	.global	vListInsert
 170               	vListInsert:
 101:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 102:FreeRTOS/Source/list.c **** 
 103:FreeRTOS/Source/list.c **** void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
 104:FreeRTOS/Source/list.c **** {
 172               	.LM22:
 173               	.LFBB4:
 174 006a CF93      		push r28
 175 006c DF93      		push r29
 176               	/* prologue: function */
 177               	/* frame size = 0 */
 178               	/* stack size = 2 */
 179               	.L__stack_usage = 2
 180 006e FC01      		movw r30,r24
 181 0070 DB01      		movw r26,r22
 105:FreeRTOS/Source/list.c **** ListItem_t *pxIterator;
 106:FreeRTOS/Source/list.c **** const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 183               	.LM23:
 184 0072 2D91      		ld r18,X+
 185 0074 3C91      		ld r19,X
 186 0076 1197      		sbiw r26,1
 107:FreeRTOS/Source/list.c **** 
 108:FreeRTOS/Source/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
 109:FreeRTOS/Source/list.c **** 	the list data structures being overwritten in memory.  They will not catch
 110:FreeRTOS/Source/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
 111:FreeRTOS/Source/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
 112:FreeRTOS/Source/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 113:FreeRTOS/Source/list.c **** 
 114:FreeRTOS/Source/list.c **** 	/* Insert the new list item into the list, sorted in xItemValue order.
 115:FreeRTOS/Source/list.c **** 
 116:FreeRTOS/Source/list.c **** 	If the list already contains a list item with the same item value then the
 117:FreeRTOS/Source/list.c **** 	new list item should be placed after it.  This ensures that TCBs which are
 118:FreeRTOS/Source/list.c **** 	stored in ready lists (all of which have the same xItemValue value) get a
 119:FreeRTOS/Source/list.c **** 	share of the CPU.  However, if the xItemValue is the same as the back marker
 120:FreeRTOS/Source/list.c **** 	the iteration loop below will not end.  Therefore the value is checked
 121:FreeRTOS/Source/list.c **** 	first, and the algorithm slightly modified if necessary. */
 122:FreeRTOS/Source/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 188               	.LM24:
 189 0078 2F3F      		cpi r18,-1
 190 007a 3207      		cpc r19,r18
 191 007c 01F4      		brne .L5
 123:FreeRTOS/Source/list.c **** 	{
 124:FreeRTOS/Source/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 193               	.LM25:
 194 007e 6781      		ldd r22,Z+7
 195 0080 7085      		ldd r23,Z+8
 196               	.L6:
 125:FreeRTOS/Source/list.c **** 	}
 126:FreeRTOS/Source/list.c **** 	else
 127:FreeRTOS/Source/list.c **** 	{
 128:FreeRTOS/Source/list.c **** 		/* *** NOTE ***********************************************************
 129:FreeRTOS/Source/list.c **** 		If you find your application is crashing here then likely causes are
 130:FreeRTOS/Source/list.c **** 		listed below.  In addition see https://www.freertos.org/FAQHelp.html for
 131:FreeRTOS/Source/list.c **** 		more tips, and ensure configASSERT() is defined!
 132:FreeRTOS/Source/list.c **** 		https://www.freertos.org/a00110.html#configASSERT
 133:FreeRTOS/Source/list.c **** 
 134:FreeRTOS/Source/list.c **** 			1) Stack overflow -
 135:FreeRTOS/Source/list.c **** 			   see https://www.freertos.org/Stacks-and-stack-overflow-checking.html
 136:FreeRTOS/Source/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M
 137:FreeRTOS/Source/list.c **** 			   parts where numerically high priority values denote low actual
 138:FreeRTOS/Source/list.c **** 			   interrupt priorities, which can seem counter intuitive.  See
 139:FreeRTOS/Source/list.c **** 			   https://www.freertos.org/RTOS-Cortex-M3-M4.html and the definition
 140:FreeRTOS/Source/list.c **** 			   of configMAX_SYSCALL_INTERRUPT_PRIORITY on
 141:FreeRTOS/Source/list.c **** 			   https://www.freertos.org/a00110.html
 142:FreeRTOS/Source/list.c **** 			3) Calling an API function from within a critical section or when
 143:FreeRTOS/Source/list.c **** 			   the scheduler is suspended, or calling an API function that does
 144:FreeRTOS/Source/list.c **** 			   not end in "FromISR" from an interrupt.
 145:FreeRTOS/Source/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 146:FreeRTOS/Source/list.c **** 			   before the scheduler has been started (are interrupts firing
 147:FreeRTOS/Source/list.c **** 			   before vTaskStartScheduler() has been called?).
 148:FreeRTOS/Source/list.c **** 		**********************************************************************/
 149:FreeRTOS/Source/list.c **** 
 150:FreeRTOS/Source/list.c **** 		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValu
 151:FreeRTOS/Source/list.c **** 		{
 152:FreeRTOS/Source/list.c **** 			/* There is nothing to do here, just iterating to the wanted
 153:FreeRTOS/Source/list.c **** 			insertion position. */
 154:FreeRTOS/Source/list.c **** 		}
 155:FreeRTOS/Source/list.c **** 	}
 156:FreeRTOS/Source/list.c **** 
 157:FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 198               	.LM26:
 199 0082 EB01      		movw r28,r22
 200 0084 8A81      		ldd r24,Y+2
 201 0086 9B81      		ldd r25,Y+3
 203               	.LM27:
 204 0088 1396      		adiw r26,2+1
 205 008a 9C93      		st X,r25
 206 008c 8E93      		st -X,r24
 207 008e 1297      		sbiw r26,2
 158:FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 209               	.LM28:
 210 0090 EC01      		movw r28,r24
 211 0092 BD83      		std Y+5,r27
 212 0094 AC83      		std Y+4,r26
 159:FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 214               	.LM29:
 215 0096 1596      		adiw r26,4+1
 216 0098 7C93      		st X,r23
 217 009a 6E93      		st -X,r22
 218 009c 1497      		sbiw r26,4
 160:FreeRTOS/Source/list.c **** 	pxIterator->pxNext = pxNewListItem;
 220               	.LM30:
 221 009e EB01      		movw r28,r22
 222 00a0 BB83      		std Y+3,r27
 223 00a2 AA83      		std Y+2,r26
 161:FreeRTOS/Source/list.c **** 
 162:FreeRTOS/Source/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 163:FreeRTOS/Source/list.c **** 	item later. */
 164:FreeRTOS/Source/list.c **** 	pxNewListItem->pxContainer = pxList;
 225               	.LM31:
 226 00a4 1996      		adiw r26,8+1
 227 00a6 FC93      		st X,r31
 228 00a8 EE93      		st -X,r30
 229 00aa 1897      		sbiw r26,8
 165:FreeRTOS/Source/list.c **** 
 166:FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 231               	.LM32:
 232 00ac 8081      		ld r24,Z
 234               	.LM33:
 235 00ae 8F5F      		subi r24,lo8(-(1))
 236 00b0 8083      		st Z,r24
 237               	/* epilogue start */
 167:FreeRTOS/Source/list.c **** }
 239               	.LM34:
 240 00b2 DF91      		pop r29
 241 00b4 CF91      		pop r28
 242 00b6 0895      		ret
 243               	.L5:
 150:FreeRTOS/Source/list.c **** 		{
 245               	.LM35:
 246 00b8 CF01      		movw r24,r30
 247 00ba 0396      		adiw r24,3
 248               	.L7:
 249 00bc BC01      		movw r22,r24
 150:FreeRTOS/Source/list.c **** 		{
 251               	.LM36:
 252 00be EC01      		movw r28,r24
 253 00c0 8A81      		ldd r24,Y+2
 254 00c2 9B81      		ldd r25,Y+3
 150:FreeRTOS/Source/list.c **** 		{
 256               	.LM37:
 257 00c4 EC01      		movw r28,r24
 258 00c6 4881      		ld r20,Y
 259 00c8 5981      		ldd r21,Y+1
 260 00ca 2417      		cp r18,r20
 261 00cc 3507      		cpc r19,r21
 262 00ce 00F4      		brsh .L7
 263 00d0 00C0      		rjmp .L6
 268               	.Lscope4:
 272               	.global	uxListRemove
 274               	uxListRemove:
 168:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 169:FreeRTOS/Source/list.c **** 
 170:FreeRTOS/Source/list.c **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 171:FreeRTOS/Source/list.c **** {
 276               	.LM38:
 277               	.LFBB5:
 278 00d2 CF93      		push r28
 279 00d4 DF93      		push r29
 280               	/* prologue: function */
 281               	/* frame size = 0 */
 282               	/* stack size = 2 */
 283               	.L__stack_usage = 2
 284 00d6 FC01      		movw r30,r24
 172:FreeRTOS/Source/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 173:FreeRTOS/Source/list.c **** item. */
 174:FreeRTOS/Source/list.c **** List_t * const pxList = pxItemToRemove->pxContainer;
 286               	.LM39:
 287 00d8 A085      		ldd r26,Z+8
 288 00da B185      		ldd r27,Z+9
 175:FreeRTOS/Source/list.c **** 
 176:FreeRTOS/Source/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 290               	.LM40:
 291 00dc 8281      		ldd r24,Z+2
 292 00de 9381      		ldd r25,Z+3
 294               	.LM41:
 295 00e0 2481      		ldd r18,Z+4
 296 00e2 3581      		ldd r19,Z+5
 298               	.LM42:
 299 00e4 EC01      		movw r28,r24
 300 00e6 3D83      		std Y+5,r19
 301 00e8 2C83      		std Y+4,r18
 177:FreeRTOS/Source/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 303               	.LM43:
 304 00ea C481      		ldd r28,Z+4
 305 00ec D581      		ldd r29,Z+5
 307               	.LM44:
 308 00ee 9B83      		std Y+3,r25
 309 00f0 8A83      		std Y+2,r24
 178:FreeRTOS/Source/list.c **** 
 179:FreeRTOS/Source/list.c **** 	/* Only used during decision coverage testing. */
 180:FreeRTOS/Source/list.c **** 	mtCOVERAGE_TEST_DELAY();
 181:FreeRTOS/Source/list.c **** 
 182:FreeRTOS/Source/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 183:FreeRTOS/Source/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 311               	.LM45:
 312 00f2 1196      		adiw r26,1
 313 00f4 8D91      		ld r24,X+
 314 00f6 9C91      		ld r25,X
 315 00f8 1297      		sbiw r26,1+1
 316 00fa 8E17      		cp r24,r30
 317 00fc 9F07      		cpc r25,r31
 318 00fe 01F4      		brne .L10
 184:FreeRTOS/Source/list.c **** 	{
 185:FreeRTOS/Source/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 320               	.LM46:
 321 0100 1296      		adiw r26,1+1
 322 0102 DC93      		st X,r29
 323 0104 CE93      		st -X,r28
 324 0106 1197      		sbiw r26,1
 325               	.L10:
 186:FreeRTOS/Source/list.c **** 	}
 187:FreeRTOS/Source/list.c **** 	else
 188:FreeRTOS/Source/list.c **** 	{
 189:FreeRTOS/Source/list.c **** 		mtCOVERAGE_TEST_MARKER();
 190:FreeRTOS/Source/list.c **** 	}
 191:FreeRTOS/Source/list.c **** 
 192:FreeRTOS/Source/list.c **** 	pxItemToRemove->pxContainer = NULL;
 327               	.LM47:
 328 0108 1186      		std Z+9,__zero_reg__
 329 010a 1086      		std Z+8,__zero_reg__
 193:FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )--;
 331               	.LM48:
 332 010c 8C91      		ld r24,X
 334               	.LM49:
 335 010e 8150      		subi r24,lo8(-(-1))
 336 0110 8C93      		st X,r24
 194:FreeRTOS/Source/list.c **** 
 195:FreeRTOS/Source/list.c **** 	return pxList->uxNumberOfItems;
 338               	.LM50:
 339 0112 8C91      		ld r24,X
 340               	/* epilogue start */
 196:FreeRTOS/Source/list.c **** }
 342               	.LM51:
 343 0114 DF91      		pop r29
 344 0116 CF91      		pop r28
 345 0118 0895      		ret
 351               	.Lscope5:
 354               	.Letext0:
 355               		.ident	"GCC: (SUSE Linux) 10.0.1 20200218 (experimental) [revision fa1160f6e50500aa38162fefb43bfb1
DEFINED SYMBOLS
                            *ABS*:0000000000000000 list.c
     /tmp/ccRqtRlc.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccRqtRlc.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccRqtRlc.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccRqtRlc.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccRqtRlc.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccRqtRlc.s:25     .text:0000000000000000 vListInitialise
     /tmp/ccRqtRlc.s:69     .text:000000000000001c vListInitialiseItem
     /tmp/ccRqtRlc.s:94     .text:0000000000000024 vListInsertEnd
     /tmp/ccRqtRlc.s:170    .text:000000000000006a vListInsert
     /tmp/ccRqtRlc.s:274    .text:00000000000000d2 uxListRemove

NO UNDEFINED SYMBOLS
